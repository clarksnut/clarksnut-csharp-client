/* 
 * Clarksnut
 *
 * Clarksnut UBL collector
 *
 * OpenAPI spec version: 1.2.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Print Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="theme">Theme (optional)</param>
        /// <param name="format">format (optional, default to pdf)</param>
        /// <returns></returns>
        void DownloadPdf (string documentId, string theme = null, string format = null);

        /// <summary>
        /// Print Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="theme">Theme (optional)</param>
        /// <param name="format">format (optional, default to pdf)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadPdfWithHttpInfo (string documentId, string theme = null, string format = null);
        /// <summary>
        /// Download Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns></returns>
        void DownloadXml (string documentId);

        /// <summary>
        /// Download Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DownloadXmlWithHttpInfo (string documentId);
        /// <summary>
        /// Return one Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>DocumentRepresentation</returns>
        DocumentRepresentation GetDocument (string documentId);

        /// <summary>
        /// Return one Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>ApiResponse of DocumentRepresentation</returns>
        ApiResponse<DocumentRepresentation> GetDocumentWithHttpInfo (string documentId);
        /// <summary>
        /// Return List of Documents
        /// </summary>
        /// <remarks>
        /// Search on allowed user (session) spaces
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterText">Filter text (optional)</param>
        /// <param name="offset">First result (optional, default to 0)</param>
        /// <param name="limit">Maz results (optional, default to 10)</param>
        /// <param name="space">Space Ids (optional)</param>
        /// <returns>GenericDataRepresentationListDocumentData</returns>
        GenericDataRepresentationListDocumentData GetDocuments (string filterText = null, int? offset = null, int? limit = null, List<string> space = null);

        /// <summary>
        /// Return List of Documents
        /// </summary>
        /// <remarks>
        /// Search on allowed user (session) spaces
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterText">Filter text (optional)</param>
        /// <param name="offset">First result (optional, default to 0)</param>
        /// <param name="limit">Maz results (optional, default to 10)</param>
        /// <param name="space">Space Ids (optional)</param>
        /// <returns>ApiResponse of GenericDataRepresentationListDocumentData</returns>
        ApiResponse<GenericDataRepresentationListDocumentData> GetDocumentsWithHttpInfo (string filterText = null, int? offset = null, int? limit = null, List<string> space = null);
        /// <summary>
        /// Import Document
        /// </summary>
        /// <remarks>
        /// This will import xml or compressed files
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ImportDocument (MultipartFormDataInput body = null);

        /// <summary>
        /// Import Document
        /// </summary>
        /// <remarks>
        /// This will import xml or compressed files
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportDocumentWithHttpInfo (MultipartFormDataInput body = null);
        /// <summary>
        /// Search Document
        /// </summary>
        /// <remarks>
        /// Search on allowed user (session) spaces
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GenericDataRepresentationListDocumentData</returns>
        GenericDataRepresentationListDocumentData SearchDocuments (DocumentQueryRepresentation body = null);

        /// <summary>
        /// Search Document
        /// </summary>
        /// <remarks>
        /// Search on allowed user (session) spaces
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GenericDataRepresentationListDocumentData</returns>
        ApiResponse<GenericDataRepresentationListDocumentData> SearchDocumentsWithHttpInfo (DocumentQueryRepresentation body = null);
        /// <summary>
        /// Update a Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>DocumentRepresentation</returns>
        DocumentRepresentation UpdateDocument (string documentId, DocumentRepresentation body = null);

        /// <summary>
        /// Update a Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DocumentRepresentation</returns>
        ApiResponse<DocumentRepresentation> UpdateDocumentWithHttpInfo (string documentId, DocumentRepresentation body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Print Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="theme">Theme (optional)</param>
        /// <param name="format">format (optional, default to pdf)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadPdfAsync (string documentId, string theme = null, string format = null);

        /// <summary>
        /// Print Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="theme">Theme (optional)</param>
        /// <param name="format">format (optional, default to pdf)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadPdfAsyncWithHttpInfo (string documentId, string theme = null, string format = null);
        /// <summary>
        /// Download Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DownloadXmlAsync (string documentId);

        /// <summary>
        /// Download Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DownloadXmlAsyncWithHttpInfo (string documentId);
        /// <summary>
        /// Return one Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>Task of DocumentRepresentation</returns>
        System.Threading.Tasks.Task<DocumentRepresentation> GetDocumentAsync (string documentId);

        /// <summary>
        /// Return one Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>Task of ApiResponse (DocumentRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentRepresentation>> GetDocumentAsyncWithHttpInfo (string documentId);
        /// <summary>
        /// Return List of Documents
        /// </summary>
        /// <remarks>
        /// Search on allowed user (session) spaces
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterText">Filter text (optional)</param>
        /// <param name="offset">First result (optional, default to 0)</param>
        /// <param name="limit">Maz results (optional, default to 10)</param>
        /// <param name="space">Space Ids (optional)</param>
        /// <returns>Task of GenericDataRepresentationListDocumentData</returns>
        System.Threading.Tasks.Task<GenericDataRepresentationListDocumentData> GetDocumentsAsync (string filterText = null, int? offset = null, int? limit = null, List<string> space = null);

        /// <summary>
        /// Return List of Documents
        /// </summary>
        /// <remarks>
        /// Search on allowed user (session) spaces
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterText">Filter text (optional)</param>
        /// <param name="offset">First result (optional, default to 0)</param>
        /// <param name="limit">Maz results (optional, default to 10)</param>
        /// <param name="space">Space Ids (optional)</param>
        /// <returns>Task of ApiResponse (GenericDataRepresentationListDocumentData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericDataRepresentationListDocumentData>> GetDocumentsAsyncWithHttpInfo (string filterText = null, int? offset = null, int? limit = null, List<string> space = null);
        /// <summary>
        /// Import Document
        /// </summary>
        /// <remarks>
        /// This will import xml or compressed files
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportDocumentAsync (MultipartFormDataInput body = null);

        /// <summary>
        /// Import Document
        /// </summary>
        /// <remarks>
        /// This will import xml or compressed files
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportDocumentAsyncWithHttpInfo (MultipartFormDataInput body = null);
        /// <summary>
        /// Search Document
        /// </summary>
        /// <remarks>
        /// Search on allowed user (session) spaces
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GenericDataRepresentationListDocumentData</returns>
        System.Threading.Tasks.Task<GenericDataRepresentationListDocumentData> SearchDocumentsAsync (DocumentQueryRepresentation body = null);

        /// <summary>
        /// Search Document
        /// </summary>
        /// <remarks>
        /// Search on allowed user (session) spaces
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GenericDataRepresentationListDocumentData)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericDataRepresentationListDocumentData>> SearchDocumentsAsyncWithHttpInfo (DocumentQueryRepresentation body = null);
        /// <summary>
        /// Update a Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DocumentRepresentation</returns>
        System.Threading.Tasks.Task<DocumentRepresentation> UpdateDocumentAsync (string documentId, DocumentRepresentation body = null);

        /// <summary>
        /// Update a Document
        /// </summary>
        /// <remarks>
        /// User need to have access to the Space owner of the document
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentRepresentation)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentRepresentation>> UpdateDocumentAsyncWithHttpInfo (string documentId, DocumentRepresentation body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentsApi : IDocumentsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Print Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="theme">Theme (optional)</param>
        /// <param name="format">format (optional, default to pdf)</param>
        /// <returns></returns>
        public void DownloadPdf (string documentId, string theme = null, string format = null)
        {
             DownloadPdfWithHttpInfo(documentId, theme, format);
        }

        /// <summary>
        /// Print Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="theme">Theme (optional)</param>
        /// <param name="format">format (optional, default to pdf)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DownloadPdfWithHttpInfo (string documentId, string theme = null, string format = null)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DownloadPdf");

            var localVarPath = "/api/documents/{documentId}/print";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (theme != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "theme", theme)); // query parameter
            if (format != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Print Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="theme">Theme (optional)</param>
        /// <param name="format">format (optional, default to pdf)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadPdfAsync (string documentId, string theme = null, string format = null)
        {
             await DownloadPdfAsyncWithHttpInfo(documentId, theme, format);

        }

        /// <summary>
        /// Print Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="theme">Theme (optional)</param>
        /// <param name="format">format (optional, default to pdf)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DownloadPdfAsyncWithHttpInfo (string documentId, string theme = null, string format = null)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DownloadPdf");

            var localVarPath = "/api/documents/{documentId}/print";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (theme != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "theme", theme)); // query parameter
            if (format != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "format", format)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Download Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns></returns>
        public void DownloadXml (string documentId)
        {
             DownloadXmlWithHttpInfo(documentId);
        }

        /// <summary>
        /// Download Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DownloadXmlWithHttpInfo (string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DownloadXml");

            var localVarPath = "/api/documents/{documentId}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Download Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DownloadXmlAsync (string documentId)
        {
             await DownloadXmlAsyncWithHttpInfo(documentId);

        }

        /// <summary>
        /// Download Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DownloadXmlAsyncWithHttpInfo (string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->DownloadXml");

            var localVarPath = "/api/documents/{documentId}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadXml", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Return one Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>DocumentRepresentation</returns>
        public DocumentRepresentation GetDocument (string documentId)
        {
             ApiResponse<DocumentRepresentation> localVarResponse = GetDocumentWithHttpInfo(documentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return one Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>ApiResponse of DocumentRepresentation</returns>
        public ApiResponse< DocumentRepresentation > GetDocumentWithHttpInfo (string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->GetDocument");

            var localVarPath = "/api/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentRepresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentRepresentation)));
        }

        /// <summary>
        /// Return one Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>Task of DocumentRepresentation</returns>
        public async System.Threading.Tasks.Task<DocumentRepresentation> GetDocumentAsync (string documentId)
        {
             ApiResponse<DocumentRepresentation> localVarResponse = await GetDocumentAsyncWithHttpInfo(documentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return one Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <returns>Task of ApiResponse (DocumentRepresentation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentRepresentation>> GetDocumentAsyncWithHttpInfo (string documentId)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->GetDocument");

            var localVarPath = "/api/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentRepresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentRepresentation)));
        }

        /// <summary>
        /// Return List of Documents Search on allowed user (session) spaces
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterText">Filter text (optional)</param>
        /// <param name="offset">First result (optional, default to 0)</param>
        /// <param name="limit">Maz results (optional, default to 10)</param>
        /// <param name="space">Space Ids (optional)</param>
        /// <returns>GenericDataRepresentationListDocumentData</returns>
        public GenericDataRepresentationListDocumentData GetDocuments (string filterText = null, int? offset = null, int? limit = null, List<string> space = null)
        {
             ApiResponse<GenericDataRepresentationListDocumentData> localVarResponse = GetDocumentsWithHttpInfo(filterText, offset, limit, space);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return List of Documents Search on allowed user (session) spaces
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterText">Filter text (optional)</param>
        /// <param name="offset">First result (optional, default to 0)</param>
        /// <param name="limit">Maz results (optional, default to 10)</param>
        /// <param name="space">Space Ids (optional)</param>
        /// <returns>ApiResponse of GenericDataRepresentationListDocumentData</returns>
        public ApiResponse< GenericDataRepresentationListDocumentData > GetDocumentsWithHttpInfo (string filterText = null, int? offset = null, int? limit = null, List<string> space = null)
        {

            var localVarPath = "/api/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filterText != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filterText", filterText)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (space != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "space", space)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericDataRepresentationListDocumentData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericDataRepresentationListDocumentData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericDataRepresentationListDocumentData)));
        }

        /// <summary>
        /// Return List of Documents Search on allowed user (session) spaces
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterText">Filter text (optional)</param>
        /// <param name="offset">First result (optional, default to 0)</param>
        /// <param name="limit">Maz results (optional, default to 10)</param>
        /// <param name="space">Space Ids (optional)</param>
        /// <returns>Task of GenericDataRepresentationListDocumentData</returns>
        public async System.Threading.Tasks.Task<GenericDataRepresentationListDocumentData> GetDocumentsAsync (string filterText = null, int? offset = null, int? limit = null, List<string> space = null)
        {
             ApiResponse<GenericDataRepresentationListDocumentData> localVarResponse = await GetDocumentsAsyncWithHttpInfo(filterText, offset, limit, space);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return List of Documents Search on allowed user (session) spaces
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterText">Filter text (optional)</param>
        /// <param name="offset">First result (optional, default to 0)</param>
        /// <param name="limit">Maz results (optional, default to 10)</param>
        /// <param name="space">Space Ids (optional)</param>
        /// <returns>Task of ApiResponse (GenericDataRepresentationListDocumentData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenericDataRepresentationListDocumentData>> GetDocumentsAsyncWithHttpInfo (string filterText = null, int? offset = null, int? limit = null, List<string> space = null)
        {

            var localVarPath = "/api/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filterText != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filterText", filterText)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (space != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "space", space)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericDataRepresentationListDocumentData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericDataRepresentationListDocumentData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericDataRepresentationListDocumentData)));
        }

        /// <summary>
        /// Import Document This will import xml or compressed files
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ImportDocument (MultipartFormDataInput body = null)
        {
             ImportDocumentWithHttpInfo(body);
        }

        /// <summary>
        /// Import Document This will import xml or compressed files
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportDocumentWithHttpInfo (MultipartFormDataInput body = null)
        {

            var localVarPath = "/api/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Import Document This will import xml or compressed files
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportDocumentAsync (MultipartFormDataInput body = null)
        {
             await ImportDocumentAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Import Document This will import xml or compressed files
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportDocumentAsyncWithHttpInfo (MultipartFormDataInput body = null)
        {

            var localVarPath = "/api/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Search Document Search on allowed user (session) spaces
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>GenericDataRepresentationListDocumentData</returns>
        public GenericDataRepresentationListDocumentData SearchDocuments (DocumentQueryRepresentation body = null)
        {
             ApiResponse<GenericDataRepresentationListDocumentData> localVarResponse = SearchDocumentsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Document Search on allowed user (session) spaces
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of GenericDataRepresentationListDocumentData</returns>
        public ApiResponse< GenericDataRepresentationListDocumentData > SearchDocumentsWithHttpInfo (DocumentQueryRepresentation body = null)
        {

            var localVarPath = "/api/documents/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericDataRepresentationListDocumentData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericDataRepresentationListDocumentData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericDataRepresentationListDocumentData)));
        }

        /// <summary>
        /// Search Document Search on allowed user (session) spaces
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of GenericDataRepresentationListDocumentData</returns>
        public async System.Threading.Tasks.Task<GenericDataRepresentationListDocumentData> SearchDocumentsAsync (DocumentQueryRepresentation body = null)
        {
             ApiResponse<GenericDataRepresentationListDocumentData> localVarResponse = await SearchDocumentsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Document Search on allowed user (session) spaces
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (GenericDataRepresentationListDocumentData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GenericDataRepresentationListDocumentData>> SearchDocumentsAsyncWithHttpInfo (DocumentQueryRepresentation body = null)
        {

            var localVarPath = "/api/documents/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GenericDataRepresentationListDocumentData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GenericDataRepresentationListDocumentData) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GenericDataRepresentationListDocumentData)));
        }

        /// <summary>
        /// Update a Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>DocumentRepresentation</returns>
        public DocumentRepresentation UpdateDocument (string documentId, DocumentRepresentation body = null)
        {
             ApiResponse<DocumentRepresentation> localVarResponse = UpdateDocumentWithHttpInfo(documentId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of DocumentRepresentation</returns>
        public ApiResponse< DocumentRepresentation > UpdateDocumentWithHttpInfo (string documentId, DocumentRepresentation body = null)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->UpdateDocument");

            var localVarPath = "/api/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentRepresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentRepresentation)));
        }

        /// <summary>
        /// Update a Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of DocumentRepresentation</returns>
        public async System.Threading.Tasks.Task<DocumentRepresentation> UpdateDocumentAsync (string documentId, DocumentRepresentation body = null)
        {
             ApiResponse<DocumentRepresentation> localVarResponse = await UpdateDocumentAsyncWithHttpInfo(documentId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Document User need to have access to the Space owner of the document
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentId">Document Id</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (DocumentRepresentation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentRepresentation>> UpdateDocumentAsyncWithHttpInfo (string documentId, DocumentRepresentation body = null)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->UpdateDocument");

            var localVarPath = "/api/documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentRepresentation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentRepresentation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentRepresentation)));
        }

    }
}
