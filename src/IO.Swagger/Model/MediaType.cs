/* 
 * Clarksnut
 *
 * Clarksnut UBL collector
 *
 * OpenAPI spec version: 1.2.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MediaType
    /// </summary>
    [DataContract]
    public partial class MediaType :  IEquatable<MediaType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MediaType" /> class.
        /// </summary>
        /// <param name="Type">Type.</param>
        /// <param name="Subtype">Subtype.</param>
        /// <param name="Parameters">Parameters.</param>
        /// <param name="WildcardSubtype">WildcardSubtype.</param>
        /// <param name="WildcardType">WildcardType.</param>
        public MediaType(string Type = default(string), string Subtype = default(string), Dictionary<string, string> Parameters = default(Dictionary<string, string>), bool? WildcardSubtype = default(bool?), bool? WildcardType = default(bool?))
        {
            this.Type = Type;
            this.Subtype = Subtype;
            this.Parameters = Parameters;
            this.WildcardSubtype = WildcardSubtype;
            this.WildcardType = WildcardType;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Subtype
        /// </summary>
        [DataMember(Name="subtype", EmitDefaultValue=false)]
        public string Subtype { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="parameters", EmitDefaultValue=false)]
        public Dictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets WildcardSubtype
        /// </summary>
        [DataMember(Name="wildcardSubtype", EmitDefaultValue=false)]
        public bool? WildcardSubtype { get; set; }

        /// <summary>
        /// Gets or Sets WildcardType
        /// </summary>
        [DataMember(Name="wildcardType", EmitDefaultValue=false)]
        public bool? WildcardType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaType {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  WildcardSubtype: ").Append(WildcardSubtype).Append("\n");
            sb.Append("  WildcardType: ").Append(WildcardType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MediaType);
        }

        /// <summary>
        /// Returns true if MediaType instances are equal
        /// </summary>
        /// <param name="input">Instance of MediaType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Subtype == input.Subtype ||
                    (this.Subtype != null &&
                    this.Subtype.Equals(input.Subtype))
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.WildcardSubtype == input.WildcardSubtype ||
                    (this.WildcardSubtype != null &&
                    this.WildcardSubtype.Equals(input.WildcardSubtype))
                ) && 
                (
                    this.WildcardType == input.WildcardType ||
                    (this.WildcardType != null &&
                    this.WildcardType.Equals(input.WildcardType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Subtype != null)
                    hashCode = hashCode * 59 + this.Subtype.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.WildcardSubtype != null)
                    hashCode = hashCode * 59 + this.WildcardSubtype.GetHashCode();
                if (this.WildcardType != null)
                    hashCode = hashCode * 59 + this.WildcardType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
