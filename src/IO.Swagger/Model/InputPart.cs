/* 
 * Clarksnut
 *
 * Clarksnut UBL collector
 *
 * OpenAPI spec version: 1.2.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InputPart
    /// </summary>
    [DataContract]
    public partial class InputPart :  IEquatable<InputPart>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputPart" /> class.
        /// </summary>
        /// <param name="BodyAsString">BodyAsString.</param>
        /// <param name="ContentTypeFromMessage">ContentTypeFromMessage.</param>
        /// <param name="Headers">Headers.</param>
        /// <param name="MediaType">MediaType.</param>
        public InputPart(string BodyAsString = default(string), bool? ContentTypeFromMessage = default(bool?), Dictionary<string, List<string>> Headers = default(Dictionary<string, List<string>>), MediaType MediaType = default(MediaType))
        {
            this.BodyAsString = BodyAsString;
            this.ContentTypeFromMessage = ContentTypeFromMessage;
            this.Headers = Headers;
            this.MediaType = MediaType;
        }
        
        /// <summary>
        /// Gets or Sets BodyAsString
        /// </summary>
        [DataMember(Name="bodyAsString", EmitDefaultValue=false)]
        public string BodyAsString { get; set; }

        /// <summary>
        /// Gets or Sets ContentTypeFromMessage
        /// </summary>
        [DataMember(Name="contentTypeFromMessage", EmitDefaultValue=false)]
        public bool? ContentTypeFromMessage { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name="headers", EmitDefaultValue=false)]
        public Dictionary<string, List<string>> Headers { get; set; }

        /// <summary>
        /// Gets or Sets MediaType
        /// </summary>
        [DataMember(Name="mediaType", EmitDefaultValue=false)]
        public MediaType MediaType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InputPart {\n");
            sb.Append("  BodyAsString: ").Append(BodyAsString).Append("\n");
            sb.Append("  ContentTypeFromMessage: ").Append(ContentTypeFromMessage).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputPart);
        }

        /// <summary>
        /// Returns true if InputPart instances are equal
        /// </summary>
        /// <param name="input">Instance of InputPart to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputPart input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BodyAsString == input.BodyAsString ||
                    (this.BodyAsString != null &&
                    this.BodyAsString.Equals(input.BodyAsString))
                ) && 
                (
                    this.ContentTypeFromMessage == input.ContentTypeFromMessage ||
                    (this.ContentTypeFromMessage != null &&
                    this.ContentTypeFromMessage.Equals(input.ContentTypeFromMessage))
                ) && 
                (
                    this.Headers == input.Headers ||
                    this.Headers != null &&
                    this.Headers.SequenceEqual(input.Headers)
                ) && 
                (
                    this.MediaType == input.MediaType ||
                    (this.MediaType != null &&
                    this.MediaType.Equals(input.MediaType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BodyAsString != null)
                    hashCode = hashCode * 59 + this.BodyAsString.GetHashCode();
                if (this.ContentTypeFromMessage != null)
                    hashCode = hashCode * 59 + this.ContentTypeFromMessage.GetHashCode();
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                if (this.MediaType != null)
                    hashCode = hashCode * 59 + this.MediaType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
