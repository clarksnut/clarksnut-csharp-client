/* 
 * Clarksnut
 *
 * Clarksnut UBL collector
 *
 * OpenAPI spec version: 1.2.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// UserAttributesRepresentation
    /// </summary>
    [DataContract]
    public partial class UserAttributesRepresentation :  IEquatable<UserAttributesRepresentation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserAttributesRepresentation" /> class.
        /// </summary>
        /// <param name="UserID">UserID.</param>
        /// <param name="FullName">FullName.</param>
        /// <param name="ImageURL">ImageURL.</param>
        /// <param name="Username">Username.</param>
        /// <param name="RegistrationCompleted">RegistrationCompleted.</param>
        /// <param name="Email">Email.</param>
        /// <param name="Bio">Bio.</param>
        /// <param name="Url">Url.</param>
        /// <param name="Company">Company.</param>
        /// <param name="ProviderType">ProviderType.</param>
        /// <param name="DefaultLanguage">DefaultLanguage.</param>
        /// <param name="CreatedAt">CreatedAt.</param>
        /// <param name="UpdatedAt">UpdatedAt.</param>
        public UserAttributesRepresentation(string UserID = default(string), string FullName = default(string), string ImageURL = default(string), string Username = default(string), bool? RegistrationCompleted = default(bool?), string Email = default(string), string Bio = default(string), string Url = default(string), string Company = default(string), string ProviderType = default(string), string DefaultLanguage = default(string), DateTime? CreatedAt = default(DateTime?), DateTime? UpdatedAt = default(DateTime?))
        {
            this.UserID = UserID;
            this.FullName = FullName;
            this.ImageURL = ImageURL;
            this.Username = Username;
            this.RegistrationCompleted = RegistrationCompleted;
            this.Email = Email;
            this.Bio = Bio;
            this.Url = Url;
            this.Company = Company;
            this.ProviderType = ProviderType;
            this.DefaultLanguage = DefaultLanguage;
            this.CreatedAt = CreatedAt;
            this.UpdatedAt = UpdatedAt;
        }
        
        /// <summary>
        /// Gets or Sets UserID
        /// </summary>
        [DataMember(Name="userID", EmitDefaultValue=false)]
        public string UserID { get; set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets ImageURL
        /// </summary>
        [DataMember(Name="imageURL", EmitDefaultValue=false)]
        public string ImageURL { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationCompleted
        /// </summary>
        [DataMember(Name="registrationCompleted", EmitDefaultValue=false)]
        public bool? RegistrationCompleted { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Bio
        /// </summary>
        [DataMember(Name="bio", EmitDefaultValue=false)]
        public string Bio { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// Gets or Sets ProviderType
        /// </summary>
        [DataMember(Name="providerType", EmitDefaultValue=false)]
        public string ProviderType { get; set; }

        /// <summary>
        /// Gets or Sets DefaultLanguage
        /// </summary>
        [DataMember(Name="defaultLanguage", EmitDefaultValue=false)]
        public string DefaultLanguage { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserAttributesRepresentation {\n");
            sb.Append("  UserID: ").Append(UserID).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  ImageURL: ").Append(ImageURL).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  RegistrationCompleted: ").Append(RegistrationCompleted).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  ProviderType: ").Append(ProviderType).Append("\n");
            sb.Append("  DefaultLanguage: ").Append(DefaultLanguage).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserAttributesRepresentation);
        }

        /// <summary>
        /// Returns true if UserAttributesRepresentation instances are equal
        /// </summary>
        /// <param name="input">Instance of UserAttributesRepresentation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserAttributesRepresentation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UserID == input.UserID ||
                    (this.UserID != null &&
                    this.UserID.Equals(input.UserID))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.ImageURL == input.ImageURL ||
                    (this.ImageURL != null &&
                    this.ImageURL.Equals(input.ImageURL))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.RegistrationCompleted == input.RegistrationCompleted ||
                    (this.RegistrationCompleted != null &&
                    this.RegistrationCompleted.Equals(input.RegistrationCompleted))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Bio == input.Bio ||
                    (this.Bio != null &&
                    this.Bio.Equals(input.Bio))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.ProviderType == input.ProviderType ||
                    (this.ProviderType != null &&
                    this.ProviderType.Equals(input.ProviderType))
                ) && 
                (
                    this.DefaultLanguage == input.DefaultLanguage ||
                    (this.DefaultLanguage != null &&
                    this.DefaultLanguage.Equals(input.DefaultLanguage))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UserID != null)
                    hashCode = hashCode * 59 + this.UserID.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.ImageURL != null)
                    hashCode = hashCode * 59 + this.ImageURL.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.RegistrationCompleted != null)
                    hashCode = hashCode * 59 + this.RegistrationCompleted.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Bio != null)
                    hashCode = hashCode * 59 + this.Bio.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.ProviderType != null)
                    hashCode = hashCode * 59 + this.ProviderType.GetHashCode();
                if (this.DefaultLanguage != null)
                    hashCode = hashCode * 59 + this.DefaultLanguage.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
