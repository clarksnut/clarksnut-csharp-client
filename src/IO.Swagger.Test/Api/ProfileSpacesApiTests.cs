/* 
 * Clarksnut
 *
 * Clarksnut UBL collector
 *
 * OpenAPI spec version: 1.2.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ProfileSpacesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ProfileSpacesApiTests
    {
        private ProfileSpacesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ProfileSpacesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ProfileSpacesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ProfileSpacesApi
            //Assert.IsInstanceOfType(typeof(ProfileSpacesApi), instance, "instance is a ProfileSpacesApi");
        }

        
        /// <summary>
        /// Test AddSpaceCollaborators
        /// </summary>
        [Test]
        public void AddSpaceCollaboratorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string spaceId = null;
            //TypedGenericDataRepresentationListUserData body = null;
            //instance.AddSpaceCollaborators(spaceId, body);
            
        }
        
        /// <summary>
        /// Test DeleteUserSpace
        /// </summary>
        [Test]
        public void DeleteUserSpaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string spaceId = null;
            //instance.DeleteUserSpace(spaceId);
            
        }
        
        /// <summary>
        /// Test GetSpaceCollaborators
        /// </summary>
        [Test]
        public void GetSpaceCollaboratorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string spaceId = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetSpaceCollaborators(spaceId, offset, limit);
            //Assert.IsInstanceOf<GenericDataRepresentationListUserData> (response, "response is GenericDataRepresentationListUserData");
        }
        
        /// <summary>
        /// Test GetUserSpace
        /// </summary>
        [Test]
        public void GetUserSpaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string spaceId = null;
            //var response = instance.GetUserSpace(spaceId);
            //Assert.IsInstanceOf<SpaceRepresentation> (response, "response is SpaceRepresentation");
        }
        
        /// <summary>
        /// Test GetUserSpaces
        /// </summary>
        [Test]
        public void GetUserSpacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string role = null;
            //var response = instance.GetUserSpaces(role);
            //Assert.IsInstanceOf<GenericDataRepresentationListSpaceData> (response, "response is GenericDataRepresentationListSpaceData");
        }
        
        /// <summary>
        /// Test RemoveSpaceCollaborators
        /// </summary>
        [Test]
        public void RemoveSpaceCollaboratorsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string spaceId = null;
            //string userId = null;
            //instance.RemoveSpaceCollaborators(spaceId, userId);
            
        }
        
        /// <summary>
        /// Test UpdateUserSpace
        /// </summary>
        [Test]
        public void UpdateUserSpaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string spaceId = null;
            //SpaceRepresentation body = null;
            //var response = instance.UpdateUserSpace(spaceId, body);
            //Assert.IsInstanceOf<SpaceRepresentation> (response, "response is SpaceRepresentation");
        }
        
    }

}
