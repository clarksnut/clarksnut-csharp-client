/* 
 * Clarksnut
 *
 * Clarksnut UBL collector
 *
 * OpenAPI spec version: 1.2.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DocumentsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DocumentsApiTests
    {
        private DocumentsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DocumentsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DocumentsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DocumentsApi
            //Assert.IsInstanceOfType(typeof(DocumentsApi), instance, "instance is a DocumentsApi");
        }

        
        /// <summary>
        /// Test DownloadPdf
        /// </summary>
        [Test]
        public void DownloadPdfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentId = null;
            //string theme = null;
            //string format = null;
            //instance.DownloadPdf(documentId, theme, format);
            
        }
        
        /// <summary>
        /// Test DownloadXml
        /// </summary>
        [Test]
        public void DownloadXmlTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentId = null;
            //instance.DownloadXml(documentId);
            
        }
        
        /// <summary>
        /// Test GetDocument
        /// </summary>
        [Test]
        public void GetDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentId = null;
            //var response = instance.GetDocument(documentId);
            //Assert.IsInstanceOf<DocumentRepresentation> (response, "response is DocumentRepresentation");
        }
        
        /// <summary>
        /// Test GetDocuments
        /// </summary>
        [Test]
        public void GetDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filterText = null;
            //int? offset = null;
            //int? limit = null;
            //List<string> space = null;
            //var response = instance.GetDocuments(filterText, offset, limit, space);
            //Assert.IsInstanceOf<GenericDataRepresentationListDocumentData> (response, "response is GenericDataRepresentationListDocumentData");
        }
        
        /// <summary>
        /// Test ImportDocument
        /// </summary>
        [Test]
        public void ImportDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MultipartFormDataInput body = null;
            //instance.ImportDocument(body);
            
        }
        
        /// <summary>
        /// Test SearchDocuments
        /// </summary>
        [Test]
        public void SearchDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentQueryRepresentation body = null;
            //var response = instance.SearchDocuments(body);
            //Assert.IsInstanceOf<GenericDataRepresentationListDocumentData> (response, "response is GenericDataRepresentationListDocumentData");
        }
        
        /// <summary>
        /// Test UpdateDocument
        /// </summary>
        [Test]
        public void UpdateDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string documentId = null;
            //DocumentRepresentation body = null;
            //var response = instance.UpdateDocument(documentId, body);
            //Assert.IsInstanceOf<DocumentRepresentation> (response, "response is DocumentRepresentation");
        }
        
    }

}
